import CartItem from "../components/cart-item";
import { useCart } from "../context/CartContext";
import { useAuth } from "../context/AuthContext";
import { useNavigate } from "react-router-dom";  // Import useNavigate
import { db } from "../config/firebase_config"; // Import Firestore
import { collection, addDoc, Timestamp, doc, updateDoc } from "firebase/firestore"; // Import c√°c h√†m c·∫ßn thi·∫øt t·ª´ Firestore

export default function Cart() {
  const { cartItems } = useCart();
  const { currentUser, loading } = useAuth();
  const navigate = useNavigate();  // Kh·ªüi t·∫°o useNavigate

  // N·∫øu ƒëang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng, hi·ªÉn th·ªã loading
  if (loading) {
    return <div>Loading...</div>;
  }

  // T√≠nh ti·ªÅn
  const subtotal = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);
  const shipping = 10000; // T√πy ch·ªçn ph√≠ v·∫≠n chuy·ªÉn
  const total = subtotal + shipping;

  const handleCheckout = async () => {
    if (!currentUser) {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n!");
      navigate("/login");  // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
      return;
    }

    // T·∫°o order object
    const order = {
      userId: currentUser.uid,  // ID c·ªßa ng∆∞·ªùi d√πng
      items: cartItems.map(item => ({
        productId: item.id,
        name: item.name,
        price: item.price,
        quantity: item.quantity,
        total: item.price * item.quantity
      })),
      subtotal: subtotal,
      shipping: shipping,
      total: total,
      status: "pending",  // Tr·∫°ng th√°i ƒë∆°n h√†ng
      createdAt: Timestamp.fromDate(new Date()), // Th·ªùi gian t·∫°o ƒë∆°n h√†ng
      updatedAt: Timestamp.fromDate(new Date())
    };

    try {
      // Th√™m ƒë∆°n h√†ng v√†o Firestore
      const docRef = await addDoc(collection(db, "orders"), order);
      console.log("Order added with ID: ", docRef.id);

      // C·∫≠p nh·∫≠t stock cho t·ª´ng s·∫£n ph·∫©m trong gi·ªè h√†ng
      for (const item of cartItems) {
        const productRef = doc(db, "products", item.id); // Tham chi·∫øu ƒë·∫øn s·∫£n ph·∫©m
        await updateDoc(productRef, {
          stock: item.stock - item.quantity  // Gi·∫£m s·ªë l∆∞·ª£ng t·ªìn kho
        });
      }

      // Sau khi t·∫°o ƒë∆°n h√†ng v√† c·∫≠p nh·∫≠t stock, chuy·ªÉn h∆∞·ªõng t·ªõi trang "Thank You" ho·∫∑c trang thanh to√°n
      alert("ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n!");
      navigate("/thank-you");  // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang c·∫£m ∆°n (ho·∫∑c trang thanh to√°n)
    } catch (error) {
      console.error("Error adding order: ", error);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-8">Your Cart</h1>

      <div className="flex flex-col lg:flex-row gap-8">
        <div className="lg:w-2/3">
          {cartItems.length === 0 ? (
            <p>Gi·ªè h√†ng tr·ªëng üò≠</p>
          ) : (
            cartItems.map((item) => (
              <CartItem key={item.id} item={item} />
            ))
          )}
        </div>

        <div className="lg:w-1/3 bg-gray-50 p-6 rounded-lg h-fit">
          <h2 className="text-xl font-semibold mb-4">Order Summary</h2>

          <div className="space-y-3 mb-6">
            <div className="flex justify-between">
              <span>Subtotal</span>
              <span>{subtotal.toLocaleString()} ƒë</span>
            </div>
            <div className="flex justify-between">
              <span>Shipping</span>
              <span>{shipping.toLocaleString()} ƒë</span>
            </div>
            <div className="flex justify-between font-semibold">
              <span>Total</span>
              <span>{total.toLocaleString()} ƒë</span>
            </div>
          </div>

          <button
            onClick={handleCheckout}  // Th√™m h√†m ki·ªÉm tra ƒëƒÉng nh·∫≠p v√† l∆∞u ƒë∆°n h√†ng
            className="w-full bg-purple-600 text-white py-3 rounded-md font-medium"
          >
            Proceed to Checkout
          </button>
        </div>
      </div>
    </div>
  );
}
